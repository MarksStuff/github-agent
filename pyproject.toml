[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "github-agent"
version = "0.1.0"
description = "GitHub Agent for repository management"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
dependencies = [
    "aiohttp>=3.8.0",
    "bandit",
    "black",
    "cachetools>=5.0.0",
    "coverage",
    "fastapi>=0.104.0",
    "GitPython",
    "mypy",
    "pydantic>=2.0.0",
    "PyGithub",
    "pyright",
    "python-lsp-jsonrpc",
    "python-lsp-server[all]>=1.8.0",
    "pytest",
    "pytest-asyncio>=0.23.0",
    "pytest-cov",
    "python-dotenv",
    "psutil>=5.8.0",
    "requests",
    "ruff==0.1.13",
    "types-requests",
    "uvicorn[standard]>=0.24.0",
    "watchdog>=3.0.0",
]

[tool.ruff]
line-length = 88
target-version = "py312"
extend-exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".venv",
    "venv",
    ".mypy_cache",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "T20", # flake8-print
    "UP",  # pyupgrade
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by line-length)
    "T201",  # print found (allow print statements for now)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["T201"]  # Allow print statements in tests

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=.",
    "--cov-report=xml",
    "--cov-report=lcov",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--strict-markers",
    "--verbose",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "asyncio: marks tests as async tests that need asyncio support",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "setup/*",
    ".venv/*",
    "venv/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.tox/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false

[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_args for common cases
